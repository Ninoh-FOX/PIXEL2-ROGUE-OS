#!/bin/bash
# make by G.R.H

. /etc/profile
. /etc/os-release

# Command line schema
# $1 = Game/Port
# $2 = Emulator
# $3 = EMUPERF

CSVDIR="/storage/roms/ROCKNIX/autocoreloader"
CSVFILE="${CSVDIR}/${2}.csv"
COREDIR="/tmp/cores"
RATMPCONF="/storage/.config/retroarch/retroarch.cfg"
RAAPPENDCONF="/tmp/.retroarch.cfg"
OUTPUT_LOG="/var/log/exec.log"
OUTPUT_LOG1="/var/log/exec1.log"
EMUPERF=${3}
ROMFILE=${1}
FILENAME=${ROMFILE##*/}
EMU=${2}

function main() {
case ${EMU} in
    "arcade")
        CORESLIST="mame2003_plus fbalpha2012 fbneo mame2000 mame2010 mame2015 fbalpha2019 mame_32b mame"
    ;;
    cps*)
        CORESLIST="fbalpha2012_cps1 fbalpha2012_cps2 fbalpha2012_cps3 fbalpha2012 fbneo mame2003_plus mame2010 mba_mini"
    ;;
    "fbn" | "fbneo")
        CORESLIST="fbneo fbalpha2012 fbalpha2012_32b mame2003_plus mame2010 mame2015 fbalpha2019 mame_32b mame"
    ;;
    "mame")
        CORESLIST="mame2003_plus mame2000 mame2010 mame2015 mame_32b mame fbalpha2012 fbneo fbalpha2019"
    ;;
    "neogeo")
        CORESLIST="fbalpha2012_neogeo fbalpha2012 fbneo mame2003_plus mame2010 mame2015 fbalpha2019 mame_32b mame"
    ;;
    "hbmame")
        CORESLIST="mame2003_plus_32b nebularm_32b fbalpha2012_32b nebularm_legacy_32b fbneo_32b"
    ;;
esac

mkdir -p ${CSVDIR}
sed -i '/video_shader_dir = "/d' ${RATMPCONF}
echo "video_shader_dir = \""\/tmp\/shaders"\"" >> ${RATMPCONF}
PASSFILE=`grep "${FILENAME}" ${CSVFILE}`
if [ $? -eq 0 ]
then
	CORENAME=${PASSFILE##*,}
	run_rom "${CORENAME}" "${ROMFILE}" "${EMUPERF}"
	if grep "Failed to load content" ${OUTPUT_LOG1} || \
	   grep "加载游戏失败" ${OUTPUT_LOG1} || \
	   grep "No content, starting dummy core" ${OUTPUT_LOG1} || \
	   grep "没有游戏，启动虚拟核心" ${OUTPUT_LOG1} || \
	   grep "Fatal error received in" ${OUTPUT_LOG1} || \
	   grep "收到严重错误于" ${OUTPUT_LOG1} || \
	   grep "Driver not found" ${OUTPUT_LOG1} || \
	   grep "Aborted" ${OUTPUT_LOG1} || \
	   grep "Fatal error" ${OUTPUT_LOG1} || \
	   grep "the game cannot be run" ${OUTPUT_LOG1}
	then
		sed -i '/'${FILENAME}'/d' ${CSVFILE}
		test_core
	else
		user_quit
	fi
else
	test_core
fi
}

function test_core() {
	for CORES in ${CORESLIST}
	do
		if [ -f "${COREDIR}/${CORES}_libretro.so" ]
		then
			run_rom "${CORES}" "${ROMFILE}" "${EMUPERF}"
			if grep "Failed to load content" ${OUTPUT_LOG1} || \
			   grep "加载游戏失败" ${OUTPUT_LOG1} || \
			   grep "No content, starting dummy core" ${OUTPUT_LOG1} || \
			   grep "没有游戏，启动虚拟核心" ${OUTPUT_LOG1} || \
			   grep "Fatal error received in" ${OUTPUT_LOG1} || \
			   grep "收到严重错误于" ${OUTPUT_LOG1} || \
			   grep "Driver not found" ${OUTPUT_LOG1} || \
			   grep "Aborted" ${OUTPUT_LOG1} || \
			   grep "Fatal error" ${OUTPUT_LOG1} || \
			   grep "the game cannot be run" ${OUTPUT_LOG1}
			then
				continue
			else
				echo "${FILENAME},${CORES}" >> ${CSVFILE}
				user_quit
			fi
		else
			continue
		fi
	done
	user_quit
}

function run_rom() {
	if [[ "${HW_ARCH}" =~ aarch64 ]]
	then
		### Check if we need retroarch 32 bits or 64 bits
		if [[ "${1}" =~ pcsx_rearmed32 ]] || \
	           [[ "${1}" =~ flycast32 ]] || \
	           [[ "${1}" == *"_32b"*  ]] || \
	           [[ "${1}" =~ desmume ]]
		then
		   export LD_LIBRARY_PATH="/usr/lib32"
		   export SPA_PLUGIN_DIR="/usr/lib32/spa-0.2"
		   export PIPEWIRE_MODULE_DIR="/usr/lib32/pipewire-0.3/"
		   export LIBGL_DRIVERS_PATH="/usr/lib32/dri"
		   export RABIN="retroarch32"
		else
		   export LD_LIBRARY_PATH="/usr/lib"
		   export SPA_PLUGIN_DIR="/usr/lib/spa-0.2"
		   export PIPEWIRE_MODULE_DIR="/usr/lib/pipewire-0.3/"
		   export LIBGL_DRIVERS_PATH="/usr/lib/dri"
		   export RABIN="retroarch"
		fi
	fi
	RUNTHIS='${3} /usr/bin/${RABIN} -L ${COREDIR}/${1}_libretro.so --config ${RATMPCONF} --appendconfig ${RAAPPENDCONF} "${2}"'
	rm -f ${OUTPUT_LOG}
	log $0 "Executing $(eval echo ${RUNTHIS})"
	eval ${RUNTHIS} &>>${OUTPUT_LOG}
	cp -f ${OUTPUT_LOG} ${OUTPUT_LOG1}
}

function user_quit() {
	sync
	exit 0
}
main
